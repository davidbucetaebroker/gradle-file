version = new ProjectVersion(0,1)

ext.versionFile = file 'version.properties'

task loadVersion(){
	project.version = readVersion()
}

ProjectVersion readVersion(){

	logger.quiet 'Reading version file'
	
	if (!versionFile.exists()){
		throw new GradleException("Required version file does not exists: $versionFile.canonicalPath")
	}
	
	Properties versionProps = new Properties()
	
	versionFile.withInputStream { stream ->
		versionProps.load(stream)
	}
	
	new ProjectVersion(
		versionProps.major.toInteger(),
		versionProps.minor.toInteger(),
		versionProps.release.toBoolean()
	)
}

task makeReleaseVersion(group: 'Version', description: 'Makes project a release version'){
	inputs.property ('release', version.release)
	outputs.file (versionFile)
	
	doLast{
		version.release = true
		
		ant.propertyfile(file: versionFile){
			entry(key: 'release', type: 'string', operation: '=', value: 'true')
		}
	}
}

task makeSnapshotVersion(group: 'Version', description: 'Makes project a snapshot version'){
	doLast{
		version.release = false;
		
		ant.propertyfile(file: versionFile){
			entry(key: 'release', type: 'string', operation: '=', value: 'false')
		}
	}
}

task first {
	doFirst{
		println "first"
	}
}

task second {
	doFirst{
		println "second"
	}
}

task third {
	doFirst{
		println "third"
	}
}

task printVersion (dependsOn: [second, first]){
	doLast{
		logger.quiet "Version: $version"
	}
}

third.dependsOn('printVersion')

class ProjectVersion{
	Integer major
	Integer minor
	Boolean release
	
	ProjectVersion(Integer major, Integer minor){
		this.major = major;
		this.minor = minor;
		this.release = Boolean.FALSE
	}
	
	ProjectVersion(Integer major, Integer minor, Boolean release){
		this(major, minor)
		this.release = release;
	}
	
	@Override
	String toString(){
		"$major.$minor.${release? 'RELEASE' : 'SNAPSHOT'}"
	}
}

class ReleaseVersionTask extends DefaultTask{
	@Input Boolean release
	@OutputFile File destFile
	
	ReleaseVersionTask(){	
		group: 'Version'
		description: 'Changes project version'
	}
	
	@TaskAction
	void start(){
		project.version.release = true
		ant.propertyfile(file: project.versionFile){
			entry(key: 'release', type: 'string', operation: '=', value: 'true')
		}
	}
}

task makeReleaseVersion2(type: ReleaseVersionTask){
	release = project.version.release
	destFile = project.versionFile 
}